from itertools import cycle
from functools import lru_cache

input_signal = "59717513948900379305109702352254961099291386881456676203556183151524797037683068791860532352118123252250974130706958763348105389034831381607519427872819735052750376719383812473081415096360867340158428371353702640632449827967163188043812193288449328058464005995046093112575926165337330100634707115160053682715014464686531460025493602539343245166620098362467196933484413717749680188294435582266877493265037758875197256932099061961217414581388227153472347319505899534413848174322474743198535953826086266146686256066319093589456135923631361106367290236939056758783671975582829257390514211329195992209734175732361974503874578275698611819911236908050184158"
base_pattern = [0, 1, 0, -1]

@lru_cache(maxsize=None)
def pattern_for_row(row):
  result = []
  for p in base_pattern:
    for _ in range(row):
      result.append(p)
  r = result[1:] + result[0:1]
  return r

for _ in range(100):
  next_phrase = ""
  for row in range(len(input_signal)):
    pattern = pattern_for_row(row+1)
    next_phrase += (str(sum([(int(a) * b) for a,b in zip(input_signal, cycle(pattern))]))[-1])
  input_signal = next_phrase

part_1 = next_phrase[:8]
print(part_1)
assert part_1 == 63794407
